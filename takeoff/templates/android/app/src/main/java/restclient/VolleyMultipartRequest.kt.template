package {{ generator.android_prefix }}.restclient

import android.graphics.Bitmap
import com.android.volley.AuthFailureError
import com.android.volley.NetworkResponse
import com.android.volley.ParseError
import com.android.volley.Request
import com.android.volley.Response
import com.android.volley.VolleyError
import com.android.volley.toolbox.HttpHeaderParser
import org.json.JSONObject

import org.json.JSONArray
import java.io.*

class NamedInputStream(internal val fileName: String, internal val inputStream: InputStream) {
}

open class VolleyMultipartRequest(method: Int, url: String, private val jsonParams: JSONObject,
                                  private val mListener: Response.Listener<NetworkResponse>,
                                  private val mErrorListener: Response.ErrorListener) : Request<NetworkResponse>(method, url, mErrorListener) {

    private val twoHyphens = "--"
    private val lineEnd = "\r\n"
    private val boundary = "apiclient-" + System.currentTimeMillis()
    private val mHeaders: Map<String, String>? = null

    @Throws(AuthFailureError::class)
    override fun getHeaders(): Map<String, String> {
        return mHeaders ?: super.getHeaders()
    }

    override fun getBodyContentType(): String {
        return "multipart/form-data;boundary=$boundary"
    }

    fun convertJsonParamsToHash(map: HashMap<String, String>, jsonObject: JSONObject, scope: String?): Map<String, String> {
        val keys = jsonObject.keys()

        while (keys.hasNext()) {
            val key = keys.next()
            var scopeValue = scope
            if(scopeValue != null) {
                scopeValue = scopeValue + "[${key}]"
            } else {
                scopeValue = key
            }

            // Not handling child JSONObject
            if (jsonObject.get(key) is JSONObject) {
                convertJsonParamsToHash(map, jsonObject.get(key) as JSONObject, scopeValue)
            } else if(!(jsonObject.get(key) is Bitmap) && !(jsonObject.get(key) is File) &&
                !(jsonObject.get(key) is InputStream) &&
                !(jsonObject.get(key) is NamedInputStream)) {
                map.put(scopeValue!!, jsonObject.get(key).toString())
            }
        }
        return map
    }

    fun getJsonMultipart(map: HashMap<String, DataPart>,jsonObject: JSONObject, scope: String?): Map<String, DataPart>? {
        val keys = jsonObject.keys()

        while (keys.hasNext()) {
            val key = keys.next()
            var scopeValue = scope

            if(scopeValue != null) {
                scopeValue = scopeValue + "[${key}]"
            } else {
                scopeValue = key
            }

            if(jsonObject.get(key) is JSONObject) {
                getJsonMultipart(map, jsonObject.get(key) as JSONObject, scopeValue)
            } else if(jsonObject.get(key) is Bitmap) {
                val postBytes = getFileDataFromDrawable(jsonObject.get(key) as Bitmap)
                val fileName = System.currentTimeMillis()
                map.put(scopeValue!!, VolleyMultipartRequest.DataPart(fileName.toString() + ".png", postBytes))
            } else if(jsonObject.get(key) is File) {
                val postBytes = getFileDataFromFile(jsonObject.get(key) as File)
                map.put(scopeValue!!, VolleyMultipartRequest.DataPart((jsonObject.get(key) as File).name, postBytes))
            } else if(jsonObject.get(key) is InputStream) {
                val postBytes = getFileDataFromInputStream(jsonObject.get(key) as InputStream)
                val fileName = System.currentTimeMillis()
                map.put(scopeValue!!, VolleyMultipartRequest.DataPart(fileName.toString() + ".pdf", postBytes))
            } else if(jsonObject.get(key) is NamedInputStream) {
                val postBytes = getFileDataFromInputStream( (jsonObject.get(key) as NamedInputStream).inputStream )
                val fileName = (jsonObject.get(key) as NamedInputStream).fileName
                map.put(scopeValue!!, VolleyMultipartRequest.DataPart(fileName, postBytes))
            }
        }
        return map
    }

    private fun getFileDataFromDrawable(bitmap: Bitmap): ByteArray {
        val byteArrayOutputStream = ByteArrayOutputStream()
        bitmap.compress(Bitmap.CompressFormat.PNG, 80, byteArrayOutputStream)
        return byteArrayOutputStream.toByteArray()
    }

    private fun getFileDataFromFile(file: File): ByteArray {
        return file.readBytes()
    }

    private fun getFileDataFromInputStream(file: InputStream): ByteArray {
        return file.readBytes()
    }

    @Throws(AuthFailureError::class)
    override fun getBody(): ByteArray? {
        val bos = ByteArrayOutputStream()
        val dos = DataOutputStream(bos)

        try {
            // populate text payload
            val params = convertJsonParamsToHash(HashMap(), jsonParams,null)
            if (params.size > 0) {
                textParse(dos, params, paramsEncoding)
            }

            // populate data byte payload
            val data = getJsonMultipart(HashMap(), jsonParams,null)
            if (data != null && data.size > 0) {
                dataParse(dos, data)
            }

            // close multipart form data after text and file data
            dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd)

            return bos.toByteArray()
        } catch (e: IOException) {
            e.printStackTrace()
        }

        return null
    }

    override fun parseNetworkResponse(response: NetworkResponse): Response<NetworkResponse> {
        try {
            return Response.success(
                response,
                HttpHeaderParser.parseCacheHeaders(response))
        } catch (e: Exception) {
            return Response.error(ParseError(e))
        }

    }

    override fun deliverResponse(response: NetworkResponse) {
        mListener.onResponse(response)
    }

    override fun deliverError(error: VolleyError) {
        mErrorListener.onErrorResponse(error)
    }

    /**
     * Parse string map into data output stream by key and value.
     *
     * @param dataOutputStream data output stream handle string parsing
     * @param params           string inputs collection
     * @param encoding         encode the inputs, default UTF-8
     * @throws IOException
     */
    @Throws(IOException::class)
    private fun textParse(dataOutputStream: DataOutputStream, params: Map<String, String>, encoding: String) {
        try {
            for ((key, value) in params) {
                buildTextPart(dataOutputStream, key, value)
            }
        } catch (uee: UnsupportedEncodingException) {
            throw RuntimeException("Encoding not supported: $encoding", uee)
        }

    }

    /**
     * Parse data into data output stream.
     *
     * @param dataOutputStream data output stream handle file attachment
     * @param data             loop through data
     * @throws IOException
     */
    @Throws(IOException::class)
    private fun dataParse(dataOutputStream: DataOutputStream, data: Map<String, DataPart>) {
        for ((key, value) in data) {
            buildDataPart(dataOutputStream, value, key)
        }
    }

    /**
     * Write string data into header and data output stream.
     *
     * @param dataOutputStream data output stream handle string parsing
     * @param parameterName    name of input
     * @param parameterValue   value of input
     * @throws IOException
     */
    @Throws(IOException::class)
    private fun buildTextPart(dataOutputStream: DataOutputStream, parameterName: String, parameterValue: String) {
        dataOutputStream.writeBytes(twoHyphens + boundary + lineEnd)
        dataOutputStream.writeBytes("Content-Disposition: form-data; name=\"$parameterName\"$lineEnd")
        dataOutputStream.writeBytes(lineEnd)
        dataOutputStream.writeBytes(parameterValue + lineEnd)
    }

    /**
     * Write data file into header and data output stream.
     *
     * @param dataOutputStream data output stream handle data parsing
     * @param dataFile         data byte as DataPart from collection
     * @param inputName        name of data input
     * @throws IOException
     */
    @Throws(IOException::class)
    private fun buildDataPart(dataOutputStream: DataOutputStream, dataFile: DataPart, inputName: String) {
        dataOutputStream.writeBytes(twoHyphens + boundary + lineEnd)
        dataOutputStream.writeBytes("Content-Disposition: form-data; name=\"" +
                inputName + "\"; filename=\"" + dataFile.fileName + "\"" + lineEnd)
        if (dataFile.type != null && !dataFile.type.trim { it <= ' ' }.isEmpty()) {
            dataOutputStream.writeBytes("Content-Type: " + dataFile.type + lineEnd)
        }
        dataOutputStream.writeBytes(lineEnd)

        val fileInputStream = ByteArrayInputStream(dataFile.content)
        var bytesAvailable = fileInputStream.available()

        val maxBufferSize = 1024 * 1024
        var bufferSize = Math.min(bytesAvailable, maxBufferSize)
        val buffer = ByteArray(bufferSize)

        var bytesRead = fileInputStream.read(buffer, 0, bufferSize)

        while (bytesRead > 0) {
            dataOutputStream.write(buffer, 0, bufferSize)
            bytesAvailable = fileInputStream.available()
            bufferSize = Math.min(bytesAvailable, maxBufferSize)
            bytesRead = fileInputStream.read(buffer, 0, bufferSize)
        }

        dataOutputStream.writeBytes(lineEnd)
    }

    class DataPart {
        var fileName: String? = null
        var content: ByteArray? = null
        val type: String? = null

        constructor() {}

        constructor(name: String, data: ByteArray) {
            fileName = name
            content = data
        }

    }
}